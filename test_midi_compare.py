def read_debugged_pitches(file_path):
    pitches = []
    with open(file_path, 'r') as file:
        for line in file:
            parts = line.strip().split('\t')
            if len(parts) >= 3:
                pitch_info = parts[0].split(': ')[1]
                pitches.append(float(pitch_info))
    return pitches


def compare_pitches(original_file, test_file):
    original_pitches = read_debugged_pitches(original_file)
    test_pitches = read_debugged_pitches(test_file)

    if len(original_pitches) != len(test_pitches):
        print("The number of pitches in the files does not match.")
        return False

    # compare each pitch
    for orig_pitch, test_pitch in zip(original_pitches, test_pitches):
        if abs(orig_pitch - test_pitch) > 0.01:
            print(f"Pitch mismatch: Original {orig_pitch:.2f}, Test {test_pitch:.2f}")
            return False

    print("All the  pitches match.")
    return True


if __name__ == "__main__":
    original_file = "sample_pitches.txt"  # rredefined file
    test_file = "debugged_pitches.txt"  # file which was generated by test

    result = compare_pitches(original_file, test_file)
    if not result:
        print("Pitch comparison failed.")
    else:
        print("Pitch comparison succeeded.")
